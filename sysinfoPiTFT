#!/bin/bash

### BEGIN INIT INFO
# Provides:           sysinfoPiTFT
# Required-Start:    hostname $local_fs
# Required-Stop:
# Should-Start:
# Default-Start:     1 2 3 4 5
# Default-Stop:
# Short-Description: shows sysinfo after booting
# Description:       before logging in it shows ram an disk usage and the IP addresses
### END INIT INFO





### GENERAL SETTINGS

screenAttached=false	# print colorful output on screen. for using as .bash_profile set to false
			# when set to false, the script runs once without refresh

buttonsAttached=false	# the new adafruit PiTFT came with four buttons attached. gpio 17 22 23 and 27
			# if you have your own buttons, checkout the function activateButtons

wifiAttached=false	# if you have an usb wifi dongle attached, wpa_supplicant will be present on your system
			# configure your networks on your own, but this script will scan for available configured networks
			# and tried to reconnect to them every run of the script. see also function connectWPA
			# if you want to keep wifi in your hand, set it to false





### check dependencies

myfiglet=$(which figlet)
if [ ! $myfiglet ]; then echo "kein figlet gefunden.     apt-get install figlet"; exit 1; fi

mybc=$(which bc)
if [ ! $mybc ];     then echo "kein bc gefunden.         apt-get install bc"; exit 1; fi

mygpio=$(which gpio)
if [ ! $mygpio ] && $buttonsAttached;   then echo "kein gpio gefunden.       apt-get install wiringpi";  exit 1; fi



### calculations
let upSeconds="$(/usr/bin/cut -d. -f1 /proc/uptime)"
# if [ $upSeconds -lt 3600 ]; then 	# for the first 60 minutes
if [ $upSeconds -lt 300 ]; then 	# for the first 5 minutes
	refresh=10			# refresh is faster 
else					# than
	refresh=120 			# afterwards. time in seconds
fi
callmyself=$0
screenwidth=$(tput cols)
screenheight=$(tput lines)
let barwidth=$screenwidth-10	# give 10 chars for description "ram....:"
if [ $barwidth -gt 70 ]; then barwidth=70; fi
let secs=$((${upSeconds}%60))
let mins=$((${upSeconds}/60%60))
let hours=$((${upSeconds}/3600%24))
let days=$((${upSeconds}/86400))
UPTIME=`printf "%d d %02d h %02d m" "$days" "$hours" "$mins" `
read one five fifteen rest < /proc/loadavg # get the load averages
let memTotalKB=`cat /proc/meminfo | grep MemTotal | awk {'print $2'}`
let memTotalMB=`awk "BEGIN {printf \"%.0f\n\", $memTotalKB / 1024}"`
let memFreeKB=`cat /proc/meminfo | grep MemFree | awk {'print $2'}`
let memFreeMB=`awk "BEGIN {printf \"%.0f\n\", $memFreeKB / 1024}"`
let memUsedKB="$memTotalKB-$memFreeKB"	
let memUsedMB=`awk "BEGIN {printf \"%.0f\n\", $memUsedKB / 1024}"`
let memPercentFree=`awk "BEGIN {printf \"%.0f\n\", $memFreeKB / $memTotalKB *100}"`
let memPercentUsed=`awk "BEGIN {printf \"%.0f\n\", $memUsedKB / $memTotalKB *100}"`
let memPercentCheck="$memPercentFree + $memPercentUsed"
externalIP="`wget -T 1 -q -O - http://icanhazip.com/  || echo "---" `"
externalName=`host -W 1 $externalIP 2> /dev/null | cut -d " " -f 5 | rev | cut -d "." -f -6 | rev`
eth0IP=`(/sbin/ifconfig eth0 | /bin/grep "inet" || echo "---") | /usr/bin/cut -d ":" -f 2 | /usr/bin/cut -d " " -f 1`
eth0Mask=`(/sbin/ifconfig eth0 | /bin/grep "inet" || echo "---" ) | /usr/bin/cut -d ":" -f 4 | /usr/bin/cut -d " " -f 1`
mgmtIP=`(/sbin/ifconfig eth0:1 | /bin/grep "inet" || echo "---") | /usr/bin/cut -d ":" -f 2 | /usr/bin/cut -d " " -f 1`
mgmtMask=`(/sbin/ifconfig eth0:1 | /bin/grep "inet" || echo "---" ) | /usr/bin/cut -d ":" -f 4 | /usr/bin/cut -d " " -f 1`
wlan0IP=`(/sbin/ifconfig wlan0 | /bin/grep "inet" || echo "---") | /usr/bin/cut -d ":" -f 2 | /usr/bin/cut -d " " -f 1`
wlan0Mask=`(/sbin/ifconfig wlan0 | /bin/grep "inet" || echo "---" ) | /usr/bin/cut -d ":" -f 4 | /usr/bin/cut -d " " -f 1`
wlan0ssid=`(wpa_cli status | grep ^ssid= | cut -d "=" -f 2) || echo ""`


### functions
function connectWPA {
	wpaFailed=`wpa_cli status 2> /dev/null > /dev/null; echo $? `
	if [ "$wpaFailed" == "255" ]; then
		echo "ups... wpa_supplicant ist nicht gestartet... versuch' mal, ihn zu wecken..."
	        wpa_supplicant -c /etc/wpa_supplicant/wpa_supplicant.conf -i wlan0 2>/dev/null &
		return
	fi
	if [ "$wpaFailed" != "0" ]; then
		echo "Da ging was schief. der wpa_supplicant ist nicht richtig gestartet..."
		killall -TERM wpa_supplicant
		return
	fi
	
	
	currentNetworkId=$(wpa_cli list_networks | grep CURRENT | cut -f 1)
	currentNetworkName=$(wpa_cli list_networks | grep CURRENT | cut -f 2)
	
	if [ "$currentNetworkId" != "" ]; then 
		# echo "wir sind schon verbunden... mit $currentNetworkName"
		return
	fi
	
	echo -n "scanning wlan..."
	
	wpa_cli scan > /dev/null 
	
	for i in $(seq 1 5); do echo -n "."; sleep 1; done;
	
	
	for ssid in $(wpa_cli list_networks | grep -e "^[0-9]" | cut -f 2 | sed "s/ /./g"); do 
			onair[${#onair[*]}]=`wpa_cli scan_results | grep "$ssid" | cut -f 5 | uniq `
		   done 
	
	for i in $(seq 0 ${#onair[*]}); do
		echo -n "${onair[${i}]} "
	done
	# echo -n "... "
	
	# echo -n "connecting ${onair[0]} ..."
	
	netid=`wpa_cli list_networks | grep ${onair[0]} | cut -f 1`
	wpa_cli select_network $netid > /dev/null
	
	sleep 2
	
	statusSSID=$(wpa_cli status | grep "^ssid" | cut -d "=" -f 2)
	statusWPA=$(wpa_cli status | grep "^wpa_state" | cut -d "=" -f 2)
	
	if [ "$statusSSID" == "${onair[0]}" ] && [ "$statusWPA" == "COMPLETED" ]; then
		# echo
		# echo "GlÃ¼ckwunsch. verbunden..."
		# echo -n "noch auf eine IP warten..."
		# for i in $(seq 1 7); do echo -n "."; sleep 1; done;
		# ipAddr=$(ifconfig wlan0 | grep inet | cut -d ":" -f2 | cut -d " " -f 1)
		# echo $ipAddr...fertig
		return
	fi
	
	if [ "$statusWPA" == "SCANNING" ]; then
		echo -n "das wird nix..."
		if [ "${onair[2]}" != "" ]; then
			echo -n "ich versuch's mal bei ${onair[2]}..."
			netid=`wpa_cli list_networks | grep "${onair[2]}" | cut -f 1`
			wpa_cli select_network $netid > /dev/null
		fi
	fi
	
	echo "failed to wpa. sorry."
	return
}
function shortMask {
    nbits=0
    IFS=.
    for dec in $1 ; do
        case $dec in
            255) let nbits+=8;;
            254) let nbits+=7;;
            252) let nbits+=6;;
            248) let nbits+=5;;
            240) let nbits+=4;;
            224) let nbits+=3;;
            192) let nbits+=2;;
            128) let nbits+=1;;
            0);;
	    ---) exit 0;;
            *) echo "Error: $dec is not recognised"; exit 1
        esac
    done
    echo "/$nbits"
} 
function membar {
	# available colors:
	# 0	Black
	# 1	Red
	# 2	Green
	# 3	Yellow
	# 4	Blue
	# 5	Magenta
	# 6	Cyan
	# 7	White
	# 8	Not used
	# 9	Reset to default color

	fgUsedColor=7
	bgUsedColor=4

	fgFreeColor=0
	bgFreeColor=2

	let memfreecount=$memPercentFree*$barwidth/100
	let memusedcount=$barwidth-$memfreecount
	let marginleft=$memusedcount/2-2
	let marginright=$memusedcount-3-$marginleft
	tput setaf $fgUsedColor; tput setab $bgUsedColor
	for ((c=1;c<=$marginleft;c++)); do echo -n " "; done
	if [ "$1" = "shownumbers" ]; then echo -n $(printf "%02d" "$memPercentUsed")%; else echo -n "   "; fi
	for ((c=1;c<=$marginright;c++)); do echo -n " "; done
	tput sgr0
	let marginleft=$memfreecount/2-2
	let marginright=$memfreecount-3-$marginleft
	tput setaf $fgFreeColor; tput setab $bgFreeColor
	for ((c=1;c<=$marginleft;c++)); do echo -n " "; done
	if [ "$1" = "shownumbers" ]; then echo -n $(printf "%02d" "$memPercentFree")%; else echo -n "   "; fi
	for ((c=1;c<$marginright;c++)); do echo -n " "; done 
	tput sgr0
	echo
}
function diskbar {
	# available colors:
	# 0	Black
	# 1	Red
	# 2	Green
	# 3	Yellow
	# 4	Blue
	# 5	Magenta
	# 6	Cyan
	# 7	White
	# 8	Not used
	# 9	Reset to default color

	fgUsedColor=7
	bgUsedColor=1

	fgFreeColor=0
	bgFreeColor=2


	let diskPercentUsed=`df -Ph | grep -E '^/dev/root' | awk '{print $5}' | cut -d "%" -f 1`
	let diskPercentFree=100-$diskPercentUsed
	let diskfreecount=$diskPercentFree*$barwidth/100
	let diskusedcount=$barwidth-$diskfreecount
	let marginleft=$diskusedcount/2-2
	let marginright=$diskusedcount-3-$marginleft
	tput setaf $fgUsedColor; tput setab $bgUsedColor
	for ((c=1;c<=$marginleft;c++)); do echo -n " "; done
	if [ "$1" = "shownumbers" ]; then echo -n $(printf "%02d" "$diskPercentUsed")%; else echo -n "   "; fi
	for ((c=1;c<=$marginright;c++)); do echo -n " "; done
	tput sgr0
	let marginleft=$diskfreecount/2-2
	let marginright=$diskfreecount-3-$marginleft
	tput setaf $fgFreeColor; tput setab $bgFreeColor
	for ((c=1;c<=$marginleft;c++)); do echo -n " "; done
	if [ "$1" = "shownumbers" ]; then echo -n $(printf "%02d" "$diskPercentFree")%; else echo -n "   "; fi
	for ((c=1;c<=$marginright;c++)); do echo -n " "; done 
	tput sgr0
	echo
}
function cpubar {
	fgUsedColor=7
	bgUsedColor=1

	fgFreeColor=0
	bgFreeColor=2

	let cpuPercentUsed=$(echo $one*100/5 | $mybc || echo -n "")
	let cpuPercentFree=100-$cpuPercentUsed
	
	let cpufreecount=$cpuPercentFree*$barwidth/100
	let cpuusedcount=$barwidth-$cpufreecount
	let marginleft=$cpuusedcount/2-2
	let marginright=$cpuusedcount-3-$marginleft
	tput setaf $fgUsedColor; tput setab $bgUsedColor
	for ((c=1;c<=$marginleft;c++)); do echo -n " "; done
	if [ "$1" = "shownumbers" ]; then echo -n $(printf "%02d" "$cpuPercentUsed")%; else echo -n "   "; fi
	for ((c=1;c<=$marginright;c++)); do echo -n " "; done
	tput sgr0
	let marginleft=$cpufreecount/2-2
	let marginright=$cpufreecount-3-$marginleft
	tput setaf $fgFreeColor; tput setab $bgFreeColor
	for ((c=1;c<=$marginleft;c++)); do echo -n " "; done
	if [ "$1" = "shownumbers" ]; then echo -n $(printf "%02d" "$cpuPercentFree")%; else echo -n "   "; fi
	for ((c=1;c<=$marginright;c++)); do echo -n " "; done 
	tput sgr0
	echo
}
function activateButtons {
	if $buttonsAttached && [ $mygpio ]; then
	$mygpio export 17 in # direction
	$mygpio export 17 up # pull-up resistant
	$mygpio export 22 in
	$mygpio export 22 up
	$mygpio export 23 in
	$mygpio export 23 up
	$mygpio export 27 in
	$mygpio export 27 up
	$mygpio mode 1 pwm	# background illumitaion
	fi
}
function menu {

	if [ "$screenwidth" -lt 53 ]; then 
		for l in $(seq 1 6); do echo; done   # fill screen
	else
		for l in $(seq 1 3); do echo; done
	fi
	
	# Button Nummer         27        23        22        17
	echo    "$(tput setaf 6)     [reload]   [bcast ping] [wlan scan]";
	echo -n "$(tput setaf 6)[+]     [aus]     [dunkel]   [hell] ";  
}




if $wifiAttached; then connectWPA ; fi
if $buttonsAttached; then activateButtons; fi

### OUTPUT

if $screenAttached; then clear; fi


echo "     $(tput setaf 1)${UPTIME}$(tput sgr0)"
echo "     $(tput setaf 1)${one} ${five} ${fifteen} $(tput sgr0)"

$myfiglet -f standard `hostname`

echo -n ".cpu....: "; cpubar shownumbers
echo -n ".ram....: "; membar shownumbers
echo -n ".disk...: "; diskbar shownumbers
echo
tput setaf 5; tput setab 0;
echo 
echo -n "ip..eth0: "; if [ "$eth0IP" = "---" ]; then tput setaf 5; else tput setaf 2; fi; echo -n $eth0IP $(shortMask $eth0Mask) ; tput setaf 5
if [ "$screenwidth" -lt 53 ]; then echo; echo -n "  "; fi
echo -n "  mgmt: "; if [ "$mgmtIP" = "---" ]; then tput setaf 5; else tput setaf 4; fi; echo $mgmtIP $(shortMask $mgmtMask)  ; tput setaf 5
echo -n "...wlan0: "; if [ "$waln0IP" = "---" ]; then tput setaf 5; else tput setaf 2; fi; echo -n $wlan0IP $(shortMask $wlan0Mask)
if [ "$screenwidth" -lt 53 ]; then echo; echo -n "   "; fi
echo "$(tput setaf 5) ssid:$(tput setaf 2) $wlan0ssid"; tput setaf 5
echo -n "..public: "; if [ "$externalIP" = "---" ]; then tput setaf 5; else tput setaf 2; fi; echo -n $externalIP
if [ "$screenwidth" -lt 53 ]; then echo; echo -n " "; fi
echo "$(tput setaf 5) $externalName"

tput sgr0

	# available colors:
	# 0	Black
	# 1	Red
	# 2	Green
	# 3	Yellow
	# 4	Blue
	# 5	Magenta
	# 6	Cyan
	# 7	White
	# 8	Not used
	# 9	Reset to default color







if ! $screenAttached && ! $buttonsAttached; then echo; exit 0; fi



### MAIN LOOP



let mrefresh=${refresh}*2
for i in $(seq 1 $mrefresh); do 
	
	sleep 0.5

	if $buttonsAttached; then
		
		# Buttons:  27    23    22    17
	
		if [ $($mygpio -g read 17) == "0" ] && [ $($mygpio -g read 27) == "1" ]; then 
			for i in $(seq 24 64 1024); do sleep 0.1; $mygpio pwm 1 $i; done
		fi
		if [ $($mygpio -g read 22) == "0" ] && [ $($mygpio -g read 27) == "1" ]; then 
			for i in $(seq 1024 -64 24); do sleep 0.1; $mygpio pwm 1 $i; done	
		fi
		if [ $($mygpio -g read 23) == "0" ] && [ $($mygpio -g read 27) == "1" ]; then 
			for i in $(seq 24 -3 0); do $mygpio pwm 1 $i; sleep 0.1; done
		fi
	
		# with + button :
	
		if [ $($mygpio -g read 17) == "0" ] && [ $($mygpio -g read 27) == "0" ]; then 
			tput sgr0
			echo
			echo
			echo wlan scan
			echo
			wpa_cli scan 2> /dev/null > /dev/null
			echo -n "scanning..."
			for i in $(seq 0 5); do echo -n "."; sleep 1; done; echo
			echo "signal  MHz   ssid"
			wpa_cli scan_results | awk '{print $3"\t"$2"\t"$5" "$6" "$7}' | grep -e "^[0-9]" | sort -nr
			echo
			menu
		fi
		if [ $($mygpio -g read 22) == "0" ] && [ $($mygpio -g read 27) == "0" ]; then 
			tput sgr0
			echo
			echo
			echo broadcast ping
			echo
			for bcast in $(ifconfig | grep inet | grep Bcast | sed "s/^.*Bcast://" | cut -d " " -f 1 ); do 
				echo "pinging $bcast";echo
				ping -b -c 10 $bcast | sed "s/^.*from //" | sed "s/:.*time=/  /"
			done 
			sleep 5;
			echo; echo "arp-tabelle"
			echo
			arp -an | awk '{print $4" "$2" "$7}'
			echo
			menu
	
		fi
		if [ $($mygpio -g read 23) == "0" ] && [ $($mygpio -g read 27) == "0" ]; then 
			exec $(echo $callmyself)
		fi
			
	fi
done
		
if $screenAttached; then exec $(echo $callmyself); fi
